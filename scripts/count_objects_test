#!/usr/bin/env python
# Copyright (c) 2019 TOYOTA MOTOR CORPORATION
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

#  * Redistributions of source code must retain the above copyright notice,
#  this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#  notice, this list of conditions and the following disclaimer in the
#  documentation and/or other materials provided with the distribution.
#  * Neither the name of Toyota Motor Corporation nor the names of its
#  contributors may be used to endorse or promote products derived from
#  this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

PKG='tmc_gazebo_task_evaluators'
import roslib; roslib.load_manifest(PKG)

import sys
import unittest
import rospy
import rospy.rostime
from rosgraph_msgs.msg import Clock
from std_msgs.msg import Int16

global numobject
numobject = 0

class TestCountObject(unittest.TestCase):
    def test_count_object(self):
        global numobject
        rospy.init_node('test_count_object')
        while not rospy.rostime._rostime_current:
            rospy.sleep(0.1)
        start_time = rospy.get_time()
        # wait for 5 seconds to drop the block to stable location
        while rospy.get_time() - start_time <= 5 and not rospy.is_shutdown():
            rospy.sleep(0.1)
        count = rospy.wait_for_message('/object_in_box_detector/count', Int16)
        self.assertEquals(count.data, numobject)

if __name__ == '__main__':
    import rosunit
    numobject = int(sys.argv[1])
    rosunit.unitrun(PKG, 'test_count_object', TestCountObject)
